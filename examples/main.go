package main

import (
	"fmt"
	"time"

	"go.trulyao.dev/mirror"
	"go.trulyao.dev/mirror/config"
	"go.trulyao.dev/mirror/generator/typescript"
	"go.trulyao.dev/mirror/parser"
)

type Language string

type Tags map[string]string

type Address struct {
	Line1      *string `mirror:"name:line_1"`
	Line2      *string `mirror:"name:line_2"`
	Street     string  `mirror:"name:street"`
	City       string  `mirror:"name:city"`
	State      string  `mirror:"name:state"`
	PostalCode string  `mirror:"name:postal_code"`
	Country    string  `mirror:"name:country"`
}

type Person struct {
	FName     string `mirror:"name:first_name"`
	LName     string `mirror:"name:last_name"`
	Age       int    `mirror:"name:age"`
	Address   `mirror:"name:address"`
	Languages []Language     `mirror:"name:languages"`
	Grades    map[string]int `mirror:"name:grades,optional:1"`
	Tags      Tags           `mirror:"name:tags"`
	CreatedAt time.Time      `mirror:"name:created_at"`
	UpdatedAt *time.Time     `mirror:"name:updated_at,type:number"`
	DeletedAt *time.Time     `mirror:"name:deleted_at"`
	IsActive  bool           `                                     ts:"name:is_active"` // using deprecated `ts` tag
}

type CreateUserFunc func(p Person) error

func main() {
	start := time.Now()

	m := mirror.New(config.Config{
		Enabled:                true,
		FlattenEmbeddedStructs: false,
	})

	m.AddSources(Language(""), Address{}, Tags{}, Person{}, CreateUserFunc(nil))

	defaultTS := typescript.DefaultConfig().
		SetFileName("default.ts").
		SetOutputPath("./examples").
		SetIndentationType(config.IndentTab)

	inlinedTS := typescript.DefaultConfig().
		SetFileName("inlined.ts").
		SetOutputPath("./examples").
		SetInlineObjects(true).
		SetPrefix("Inline_").
		SetIndentationType(config.IndentTab)

	m.AddTarget(defaultTS).AddTarget(inlinedTS)

	err := m.GenerateAndSaveAll()
	if err != nil {
		fmt.Println(err)
	}

	// Flatten embedded structs
	newParser := parser.New()
	flattenedTS := typescript.DefaultConfig().
		SetFileName("flattened"). // no extension
		SetOutputPath("./examples").
		SetPrefix("Flattened_")

	m.ResetTargets().
		SetParser(newParser).
		AddTarget(flattenedTS).
		AddSources(*new(Language), Tags{}, Person{}, CreateUserFunc(nil))

	newParser.SetConfig(parser.Config{
		EnableCaching:          true,
		FlattenEmbeddedStructs: true,
	})

	err = m.GenerateAndSaveAll()
	if err != nil {
		fmt.Println(err)
	}

	fmt.Printf("Generated %d types in %s\n", m.Count(), time.Since(start))
}

// Sample Output:
//
// /**
// * This file was generated by mirror, do not edit it manually as it will be overwritten.
// *
// * You can find the docs and source code for mirror here: https://github.com/aosasona/mirror
// */
//
//
// type Language = string;
//
// type Address = {
//     line_1: string | null;
//     line_2: string | null;
//     street: string;
//     city: string;
//     state: string;
//     postal_code: string;
//     country: string;
// };
//
// type Tags = Record<string, string>;
//
// type Person = {
//     first_name: string;
//     last_name: string;
//     age: number;
//     address: Address;
//     languages: Array<string>;
//     grades?: Record<string, number>;
//     tags: Record<string, string>;
//     created_at: string;
//     updated_at: number | null;
//     deleted_at: string | null;
//     is_active: boolean;
// };
//
// type CreateUserFunc = (arg0: Person) => string;
