package typescript

import (
	"go.trulyao.dev/mirror/config"
)

const fileHeader = `/**
* This file was generated by mirror, do not edit it manually as it will be overwritten.
*
* You can find the docs and source code for mirror here: https://github.com/aosasona/mirror
*/
`

type Config struct {
	// FileName is the name of the generated file
	FileName string

	// OutputPath is the path to write the generated file to
	OutputPath string

	// PreferInterface will generate object types as interfaces instead of types
	PreferInterface bool

	// InlineObjects will inline object types instead of using the name (e.g foo: { bar: string } instead of foo: Bar)
	InlineObjects bool

	// PreferUnknown will prefer `unknown` over `any`
	PreferUnknown bool

	// AllowUnexportedFields will include private fields
	AllowUnexportedFields bool

	// IndentationType is the type of indentation to use (space or tab)
	IntendationType config.Indentation

	// IndentationCount is the number of spaces or tabs to use for indentation (defaults to 4)
	IndentationCount int

	customTypes map[string]string
}

func New(filename, path string) *Config {
	return &Config{
		FileName:         filename,
		OutputPath:       path,
		customTypes:      make(map[string]string),
		IndentationCount: 4,
	}
}

func (c *Config) Name() string { return c.FileName }

func (c *Config) Path() string { return c.OutputPath }

func (c *Config) Language() string { return "typescript" }

func (c *Config) Extension() string { return "ts" }

func (c *Config) Header() string {
	return fileHeader
}

func (c *Config) SetFileName(name string) {
	c.FileName = name
}

func (c *Config) SetOutputPath(path string) {
	c.OutputPath = path
}

func (c *Config) AddCustomType(name, value string) {
	c.customTypes[name] = value
}

var _ config.Target = &Config{}
